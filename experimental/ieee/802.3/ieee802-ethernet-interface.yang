module ieee802-ethernet-interface {
  // QUERY - Are we OK to base models on YANG 1.1?
  yang-version "1.1";

  // TODO - Should we moved files under standard/802.3/drafts,
  //        away from experimental?
  namespace
    "urn:ieee:params:xml:ns:yang:ieee802-ethernet-interface";

  prefix eth-if;

  import ietf-interfaces {
    prefix if;
  }

  import iana-if-type {
    prefix ianaift;
  }

  organization
    "Web URL: http://www.ieee802.org/3/

     Working Group Chair:
       David Law
       dlaw@hpe.com

     Working Group Vice-chair:
       Adam Healey
       adam.healey@broadcom.com

     Acting YANG Data Model Definitions Task Force Chair:
       Yan Zhuang
       zhuangyan.zhuang@huawei.com

     Editor:
       Robert Wilton
       rwilton@cisco.com";

  contact
    "Robert Wilton - rwilton@cisco.com";
  
  description
    "This module contains YANG definitions for configuring IEEE 802.3
     Ethernet Interfaces.

     In this YANG module, 'Ethernet interface' can be interpretted as
     referring to 'IEEE 802.3 standard compliant Ethernet interfaces'";
  reference "IEEE 802.3-2015, unless dated explicitly";

  
  revision 2016-11-23 {
    description
      "Initial revision of YANG model for IEEE 802.3 Ethernet
       interfaces.

       Changes from previous draft:
       - Changed speed to decimal64, in Gb/s to 3 decimal places.
       - Moved Ethernet stats under the Ethernet interface container,
         since someone retrieving the higher layer stats may not want
         to get Ethernet statistics at the same time because they
         are a lower layer.";
    reference 
      "IEEE P802.3.2 (IEEE 802.3cf) YANG Data Model Definitions Task
       Force";
  }

  feature dynamic-rate-control {
    // TODO - Is this feature only used for 10GB for WanPhy interop?
    description
      "This feature indicates that the device supports Ethernet
       interfaces lowering the average data rate of the MAC sublayer,
       with frame granularity, by using Rate Control to dynamically
       increase the inter-packet gap for some types of Ethernet
       interface.

       Only valid for Ethernet interfaces operating at speeds above
       1000 Mb/s.";
    reference "IEEE 802.3, 30.3.1.1.33, aRateControlAbility";
  }

  // NOTE: Changed speed from enumeration to decimal to make
  //       it more future proof and easier to store/use.
  typedef eth-if-speed-type {
    type decimal64 {
      fraction-digits 3;
    }
    units "Gigabits per second, accurate to 3 decimal places";
    description
      "Used to represent the configured, negotiated, or actual speed of
       an Ethernet interface in Gb/s, accurate to 3 decimal places
       (i.e. accurate to 1 Mb/s)";
  }

  typedef duplex-type {
    type enumeration {
      enum half {
        description "Half duplex";
      }

      enum full {
        description "Full duplex";
      }
    }
    default full;
    description 
      "The current duplex mode of operation of an Ethernet interface.";
    reference "IEEE Std 802.3, 30.3.1.1.32, aDuplexStatus";
  }


  typedef flow-control-settings {
    type enumeration {
    
      enum true {
        description 
          "The value of 'true' for Ethernet interfaces
           operating at speeds above 1000 Mb/s that support Rate
           Control through lowering the average data rate of the MAC
           sublayer, with frame granularity.";
      }
      
      enum false {
        description
         "The value of 'false' for Ethernet interfaces
          operating at speeds above 1000 Mb/s that do not support
          Rate Control through lowering the average data rate of the
          MAC sublayer, with frame granularity.";
      }
    }
    description
      "Enumerates the possible values for the 'rate-control-ability'
       object";
    reference "IEEE Std 802.3, 30.3.1.1.33, aRateControlAbility";
  }

  typedef dynamic-rate-control-type {
    type enumeration {
      enum disabled {
        description 
          "Dynamic rate control is disabled";
      }
    
      enum "sonet-oc192" {
        value 2;
        description 
          "Dynamic rate control is enabled for a 10GB/s Ethernet interface to the SONET/SDH OC192/STM64
           speed.";
      }
    }
    default disabled;
    description
      "Allowed values for dynamic-rate-control";
    reference "IEEE Std 802.3, 4.4.2 ipgStretchRatio and 30.3.1.1.34, aRateControlStatus";
  }

  typedef pause-control {
       
    type enumeration {
    
      enum disabled {
        value 1;
        
        description 
          "The PAUSE Control is disabled";
      }
    
      enum enabled-Tx {
        value 2;

        description 
          "The PAUSE operation is enabled in transmit direction
           only";
      }
    
      enum enabled-Rx {
        value 3;

        description 
          "The PAUSE operation is enabled in receive direction
           only";
      }
    
      enum enabled-bidirectional {
        value 4;

        description 
          "The PAUSE operation is enabled in receive and transmit
           directions";
      }
    }
    description
      "Enumerates the possible values for the 'macc-pause-control'
       object";
    reference
      "IEEE Std 802.3.1, dot3PauseAdminMode and dot3PauseOperMode";

  }

  typedef macc-control {
       
    type enumeration {
    
      enum PAUSE {
        value 0;

        description 
          "IEEE Std 802.3 Ethernet PAUSE flow control";
      }
    
      enum MPCP {
        value 1;

        description 
          "IEEE Std 802.3 Ethernet Multi-Point Control Protocol";
      }
    
      enum PFC {
        value 2;

        description 
          "IEEE Std 802.3 Ethernet Priority-based Flow Control";
      }
    }
    description
      "Enumerates the possible values for the 'macc-control' object";
    reference "IEEE Std 802.3.1, dot3ControlFunctionsSupported";

  }

  augment "/if:interfaces/if:interface" {
    when "if:type = 'ianaift:ethernetCsmacd'" {
      description "Applies to all P2P Ethernet interfaces";
    }
    description 
      "Augment interface model with IEEE Std 803.2 Ethernet interface
       specific configuration nodes";

    container ethernet {
      description
        "Contains all Ethernet interface related configuration";
      choice transmission-mode {
        description
          "Indicates whether the transmission parameters are manually
           configured or automatically negotiated with the peer
           device";
           
        case auto-negotiation {
          description 
            "Transmission parameters are automatically
             negotiated";
          
          container auto-negotiation {
            
            description
              "Contains auto-negotiation transmission parameters";
            reference "IEEE Std 802.3 section 28 and annexes 28A-D";
           
            leaf enabled {
              type boolean;
              
              default "true";
              description
                "Indicates whether auto-negotiation is enabled or
                 disabled";
            }
            
            leaf duplex {
              type enumeration {
                enum full {
                  description
                    "Restricts auto-negotiation to advertising full
                     duplex only.  Negotiation will fail, and the
                     link will not come up, if the peer device only
                     allows for half duplex during negotiation.";
                }
                
                enum half {
                  description
                    "Restricts auto-negotiation to advertising half
                     duplex only.  Negotiation will fail, and the
                     link will not come up, if the peer device only
                     allows for full duplex during negotiation.";
                }                
              }
              
              description
                "Allows the advertised duplex value in the
                 negotiation to be restricted.

                 Half duplex can only be negotiated for some interface
                 types - as specified in 802.3, annex section 28B.3.

                 If not specified then the default behaviour is to
                 negotiate all available values for the particular
                 type of Ethernet PHY associated with the interface.";
            }
            
            leaf speed {
              type eth-if-speed-type {
                // QUERY: Is restricting the speed useful here?
                range "0.01 | 0.1 | 1 | 2.5 | 5 | 10 | 25 | 40 | 100";
              }

              description
                "Allows the advertised speed value (Gb/s) in the
                 negotiation to be restricted. Speed is only
                 negotiated for some PHYs, many higher speed PHYs
                 operate at a fixed speed.  If this leaf is not set
                 then the default behaviour is to negotiate all
                 available speeds, generally choosing the fastest
                 speed as per 802.3 Annex 28B.3.";
                 
              reference "IEEE Std 802.3 Annex section 28B.3";
            }
            
            leaf advertised-flow-control {
              type enumeration {
                enum disabled {
                  description
                    "Explicitly prevents ingress or egress
                     flow-control from being negotiated with the peer
                     device.";
                  reference 
                    "IEEE Std 802.3 Table 28B-2,
                     Capability: No PAUSE";
                  
                }
                enum ingress-only {
                  description
                    "Allows only ingress flow-control to be
                     negotiated with the peer device";
                  reference
                    "IEEE Std 802.3 Table 28B-2, Capability:
                     Asymmetric PAUSE towards link partner";
                  
                }
                enum bi-directional-only {
                  description
                    "Allows only bi-directional flow-control to be
                     negotiated with the peer device.";
                  reference
                    "IEEE Std 802.3 Table 28B-2, Capability:
                     Symmetric PAUSE";
                }
              }
              description
                "By default, the flow control capabilities that are
                 negotiated allows for bi-directional or egress-only
                 flow control to be negotiated (depending on the peer
                 device capabilities/configuration).";
              reference
                "IEEE Std 802.3 Table 28B-2, Capability:
                 Both Symmetric PAUSE and Asymmetric PAUSE toward
                 local device";
            }
            
            leaf forced-flow-control {
              type macc-control;
              description
                "Explicitly force the local flow control settings
                 regardless of what has been negotiated.  Since the
                 auto-negotiation of flow-control settings doesn't
                 allow all sane combinations to be negotiated (e.g.
                 consider a device that is only capable of sending
                 PAUSE frames connected to a peer device that is only
                 capable of receiving and acting on PAUSE frames) and
                 failing to agree on the flow-control settings
                 doesn't cause the auto-negotation to fail
                 completely, then it is sometimes useful to be able
                 to explicitly enable particular flow control
                 settings on the local device regardless of what is
                 being advertised or negotiated";
              reference
                "IEEE Std 802.3 Table 28B-3-Pause resolution";
            }
          }
        }
        
        case manual {
          description
            "Transmission parameters are manually configured (as
             required)";
          container manual {
            description
              "Manually configured transmission parameters";
            leaf duplex {
              type enumeration {
                enum full {
                  description
                    "Forces the Ethernet interface to run in full
                     duplex mode.";
                  
                }
                enum half {
                  description
                    "Forces the Ethernet interface to run in half
                     duplex mode.  Not applicable to many PHY types.";
                }
              }
              default full;
              description 
                "Configures the Ethernet interface to run in either
                 full or half duplex mode.";
            }
            
            leaf speed {
              type eth-if-speed-type;

              description
                "For PHY types that may operate at various speeds,
                 this leaf allows the interface to be forced to
                 operate at a particular speed.  Without any explicit
                 configuration, Ethernet interfaces run at the maximum
                 speed that they are capable of operating at";
            }
            
            leaf flow-control {
              type macc-control;
              description
                "The default flow-control capabilities are
                 vendor/interface specific";
            }
          }
        }
      }

      leaf dynamic-rate-control {
        if-feature "dynamic-rate-control";
        type dynamic-rate-control-type;
        description
          "Enables dynamic rate control and specifies what speed the
           dynamic rate control is operating at.  The speeds that may
           be configured are constrained by the MAC data rate, and
           hardware support.";
        reference "IEEE Std 802.3, 30.3.1.1.34, aRateControlStatus";
      }
    }
  }
  
  /*
   * Operational State.
   */
  augment "/if:interfaces-state/if:interface" {
    when "if:type = 'ianaift:ethernetCsmacd'" {
      description "Applies to all Ethernet interfaces";
    }
    description 
      "Augments interfaces-state model with 802.3 Ethernet
       specific operational state nodes";

    // QUERY: Does Ethernet interface configuration go under here?
    container ethernet {
      description
        "Contains operational state for Ethernet interfaces";
      
      // TODO - Change this to a simple leaf (not-applicable, disabled, enabled), and separate leaf for auto-neg status.
      container auto-negotiation {
        presence "Indicates that auto-negotiation is enabled";
        description "Contains auto-negotiation status";
        
        leaf status {
          type enumeration {
            enum successful {
              description
                "Auto-negotation has completed successfully";
            }
            enum failed {
              description "Auto-negotiation has failed";
            }
            enum unknown {
              description
                "The auto-negotiation status is not currently known,
                 this may be because it is still negotiating or the
                 protocol cannot run (e.g. if no medium is present)";
            }
          }
          description
            "The status of the auto-negotiation protocol";
        }
      }

      leaf duplex {
        type duplex-type;
        description 
          "The current duplex mode of operation of the Ethernet interface.";
        reference "IEEE Std 802.3, 30.3.1.1.32, aDuplexStatus";
      }
      
      leaf speed {
        type eth-if-speed-type;
        units "Gb/s";
        description "Operational speed of the Ethernet interface";
      }
      
      leaf flow-control { 
        type flow-control-settings;
        description
          "Operation flow-control setting on the Ethernet interface";
      }

      leaf dynamic-rate-control {
        if-feature "dynamic-rate-control";
        type dynamic-rate-control-type;
        description
          "Enables dynamic rate control and specifies what speed the
           dynamic rate control is operating at.  The speeds that may
           be configured are constrained by the MAC data rate, and
           hardware support.";
        reference "IEEE Std 802.3, 30.3.1.1.34, aRateControlStatus";
      }

      leaf macc-extension-control {
        type boolean;
        description
          "A value that identifies the current EXTENSION MAC Control
           function, as specified in IEEE Std 802.3, Annex 31C.";
        reference 
          "IEEE Std 802.3, 30.3.8.3 aEXTENSIONMACCtrlStatus
           IEEE Std 802.3.1, dot3ExtensionMacCtrlStatus ";
      }

      leaf macc-pfc-control {
        type boolean;
        description 
          "A value that identifies the current operational state of
           the PFC MAC Control function (when read), as specified in
           IEEE Std 802.3, Annex 31C.  When read, the value of this
           object reflects the current operational PFC mode of the
           Ethernet interface.";
        reference 
          "IEEE Std 802.3, 30.3.3.6, aPFCenableStatus
          IEEE Std 802.3.1, dot3PFCAdminMode and dot3PFCOperMode";
      }

      leaf macc-pause-control {
        type pause-control;
        description 
          "A value that identifies the current (when read) or
           target (when set) operational state of the PAUSE MAC
           Control function (when read).

           Note that the value of this object is ignored when the
           Ethernet interface is not operating in full-duplex mode. An
           attempt to set this object to 'enabled-Tx' or 'enabled-Rx'
           will fail on Ethernet interfaces that do not support
           operation at greater than 100 Mb/s.\" When read, the value
           of this object reflects the current operational PAUSE
           Control function of the Ethernet interface.";
        reference
          "IEEE Std 802.3.1, dot3PauseAdminMode and
           dot3PauseOperMode";
      }

      leaf macc-control {
        type macc-control;
        config false;
        description
          "A list of the possible MAC Control functions implemented
           for this Ethernet interface.";
        reference "IEEE Std 802.3.1, dot3ControlFunctionsSupported";
      }

      // TODO - Should this leaf also be configurable?
      leaf frame-limit-slow-protocol {
        type uint32;
        units fps;
        default 10;
        description
          "The maximum number of Slow Protocol frames of a given
           subtype that can be transmitted in a one second interval.
           The default value is 10. ";
        reference 
          "IEEE Std 802.3, 30.3.1.1.38, aSlowProtocolFrameLimit";
      }

      /*
       * TODO - Figure out whether capabilities should just be
       *        reported as a state container, or whether they would
       *        be better represented as a grouping and accessible
       *        via an RPC.
       */
      container capabilities {
        description "Container all Ethernet interface specific capabilties.";
        leaf dynamic-rate-control-supported {
          type boolean;
          default false;
          description 
            "Indicates whether the Ethernet interface supports lowering the
             average data rate of the MAC sublayer, with frame
             granularity, by using Rate Control to dynamically
             increase the inter-packet gap.

             Only valid for Ethernet interfaces operating at speeds above 1000
             Mb/s.";
            reference "IEEE 802.3, 30.3.1.1.33, aRateControlAbility";
        }
      }
    }

    /*
     * Ethernet statistics.
     */
    container statistics {
      description
        "Contains statistics specific to Ethernet interfaces

         Error counters are only reported once ... The count
         represented by an instance of this object is incremented when
         the frameCheckError status is returned by the MAC service to
         the LLC (or other MAC user). Received frames for which
         multiple error conditions pertain are, according to the
         conventions of IEEE 802.3 Layer Management, counted
         exclusively according to the error status presented to the
         LLC.

         Discontinuities in the values of this counters in this
         container can occur at re-initialization of the management
         system, and at other times as indicated by the value of the
         'discontinuity-time' leaf defined in the ietf-interfaces YANG
         module (RFC 7223).";

      leaf in-pkts-errors-fcs {
        type uint64;
        units frames;
        description 
          "A count of receive frames that do not pass the FCS check,
           regardless of whether or not the frames are an integral
           number of octects in length, and regardless of the frame
           length.

           This count effective comprises aFrameCheckSequenceErrors
           and aAlignmentErrors added together.

           Note: Coding errors detected by the Physical Layer for
           speeds above 10 Mb/s will cause the frame to fail the FCS
           check.

           A frame that is counted by an instance of this object is
           also counted by the corresponding instance of 'in-errors'
           leaf defined in the ietf-interfaces YANG module (RFC 7223).

           Discontinuities in the values of this counters in this
           container can occur at re-initialization of the management
           system, and at other times as indicated by the value of the
           'discontinuity-time' leaf defined in the ietf-interfaces
           YANG module (RFC 7223).";
        reference
          "IEEE 802.3, 30.3.1.1.6, aFrameCheckSequenceErrors";
      }
      leaf in-pkts-errors-alignment {
        type uint64;
        units frames;
        description 
          "A count of frames received on a particular Ethernet
           interface that are not an integral number of octets in
           length and do not pass the FCS check.

           The count represented by an instance of this object is
           incremented when the alignmentError status is returned by
           the MAC service to the LLC (or other MAC user). Received
           frames for which multiple error conditions pertain are,
           according to the conventions of IEEE 802.3 Layer
           Management, counted exclusively according to the error
           status presented to the LLC.

           This counter does not increment for group encoding schemes
           greater than 4 bits per group.

           A frame that is counted by an instance of this object is
           also counted by the corresponding instance of 'in-errors'
           leaf defined in the ietf-interfaces YANG module (RFC 7223).

           Discontinuities in the values of this counters in this
           container can occur at re-initialization of the management
           system, and at other times as indicated by the value of the
           'discontinuity-time' leaf defined in the ietf-interfaces
           YANG module (RFC 7223).";
        reference "IEEE 802.3, 30.3.1.1.7, aAlignmentErrors";
      }
      leaf in-giant-pkts {
        type uint64;
        units frames;
        description
          "A count of frames received on a particular Ethernet
           interface that exceed the maximum permitted frame size.
           TODO - Ties this back to the oper MTU.

           The count represented by an instance of this object is
           incremented when the frameTooLong status is returned by the
           MAC service to the LLC (or other MAC user). Received frames
           for which multiple error conditions pertain are, according
           to the conventions of IEEE 802.3 Layer Management, counted
           exclusively according to the error status presented to the
           LLC.

           A frame that is counted by an instance of this object is
           also counted by the corresponding instance of 'in-errors'
           leaf defined in the ietf-interfaces YANG module (RFC 7223).

           Discontinuities in the values of this counters in this
           container can occur at re-initialization of the management
           system, and at other times as indicated by the value of the
           'discontinuity-time' leaf defined in the ietf-interfaces
           YANG module (RFC 7223).";
        reference "IEEE 802.3, 30.3.1.1.25, aFrameTooLongErrors";
      }
      leaf in-giant-threshold-pkts {
        type uint64;
        units octets;
        description
          "This indicates the MAC frame length at which the
           'in-giants-pkts' counter is incremented";
        reference "IEEE 802.3, 30.3.1.1.37, aMaxFrameLength";
      }
      leaf in-errors-symbol {
        type uint64;
        units errors;
        description 
          "For an IEEE 802.3 Ethernet operating at 100 Mb/s, the
           number of times there was an invalid data symbol when a
           valid carrier was present.  For an IEEE 802.3 Ethernet
           operating in half-duplex mode at 1000 Mb/s, the number of
           times the receiving media is non-idle (a carrier event)
           for a period of time equal to or greater than slotTime,
           and during which there was at least one occurrence of an
           event that causes the PHY to indicate 'Data reception
           error' or 'carrier extend error' on the GMII.  For an IEEE
           Std 802.3 Ethernet operating in full-duplex mode at 1000
           Mb/s, the number of times the receiving media is non-idle
           (a carrier event) for a period of time equal to or greater
           than minFrameSize, and during which there was at least one
           occurrence of an event that causes the PHY to indicate
           'Data reception error' on the GMII.  For an IEEE 802.3
           Ethernet operating at 10 Gb/s, 40 Gb/s, and 100 Gb/s, it
           is a count of the number of times the receiving media is
           non-idle (the time between the Start of Packet Delimiter
           and the End of Packet Delimiter) for a period of time
           equal to or greater than minFrameSize, and during which
           there was at least one occurrence of an event that causes
           the PHY to indicate 'Receive Error' on the XGMII, the
           XLGMII, or the CGMII. The count represented by an instance
           of this object is incremented at most once per carrier
           event, even if multiple symbol errors occur during the
           carrier event.  This count does not increment if a
           collision is present.  This counter does not increment
           when the IEEE 802.3 Ethernet is operating at 10 Mb/s.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           ifCounterDiscontinuityTime";
        reference 
          "IEEE 802.3, 30.3.2.1.5, aSymbolErrorDuringCarrier";
      }
    }
  }
  
  /*
   * Operational State.
   */
  augment "/if:interfaces-state/if:interface/if:statistics" {
    when "if:type = 'ianaift:ethernetCsmacd'" {
      description
        "Applies to all IEEE 802.3 Ethernet interfaces";
    }
    description
      "Augments 'statistics' container in
       ietf-interfaces/interfaces-state model for IEEE 802.3
       Ethernet interfaces";
    
    container ethernet {
      description
        "Contains statistics specific to IEEE 802.3 Ethernet
         interfaces";

            // TODO - Not a statistic :-)
      container statistics-macc {
        description
          "Group of statistics specific to MAC Control operation of
           selected Ethernet interfaces.";
        reference 
          "IEEE 802.3, IEEE 802.3.1, dot3ExtensionTable";
        leaf in-pkts-macc-extension {
          type uint64;
          units frames;
          description 
            "A count of Extension MAC Control frames received on this
             Ethernet interface.  Discontinuities in the value of this
             counter can occur at re-initialization of the management
             system, and at other times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference 
            "IEEE 802.3, 30.3.8.2
               aEXTENSIONMACCtrlFramesReceived,
             IEEE 802.3.1, dot3HCInExtensionFrames";
        }
        leaf in-pkts-macc-pfc {
          type uint64;
          units frames;
          description 
            "A count of PFC MAC Control frames received on this
             Ethernet interface.  Discontinuities in the value of this
             counter can occur at re-initialization of the management
             system, and at other times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference "IEEE 802.3.1, dot3HCInPFCFrames";
        }
        leaf in-pkts-macc-pause {
          type uint64;
          units frames;
          description 
            "A count of PAUSE MAC Control frames received on this
             Ethernet interface.

             This counter does not increment when the Ethernet
             interface is operating in half-duplex mode.

             Discontinuities in the value of this counter can occur at
             re-initialization of the management system, and at other
             times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference 
            "IEEE 802.3, 30.3.4.3,aPAUSEMACCtrlFramesReceived
             IEEE 802.3.1, dot3HCInPauseFrames and
             dot3InPauseFrames";
        }
        leaf in-pkts-macc-unknown {
          type uint64;
          units frames;
          description 
            "A count of MAC Control frames with
             unknown/undefined/unsupported received on this Ethernet
             interface.  This counter does not increment when the
             Ethernet interface is operating in half-duplex mode.
             
             Discontinuities in the value of this counter can occur at
             re-initialization of the management system, and at other
             times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference 
            "IEEE 802.3, 30.3.3.5 aUnsupportedOpcodesReceived
             IEEE 802.3.1, dot3ControlInUnknownOpcodes and
             dot3HCControlInUnknownOpcodes";
        }
        leaf out-pkts-macc-extension {
          type uint64;
          units frames;
          description 
            "A count of Extension MAC Control frames transmitted on
             this Ethernet interface.

             Discontinuities in the value of this counter can occur at
             re-initialization of the management system, and at other
             times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference 
            "IEEE 802.3, 30.3.8.1
             aEXTENSIONMACCtrlFramesTransmitted
             IEEE 802.3.1, dot3HCOutExtensionFrames";
        }
        leaf out-pkts-macc-pfc {
          type uint64;
          units frames;
          description 
            "A count of PFC MAC Control frames transmitted on this
             Ethernet interface.

             Discontinuities in the value of this counter can occur at
             re-initialization of the management system, and at other
             times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference "IEEE 802.3.1, dot3HCOutPFCFrames ";
        }
        leaf out-pkts-macc-pause {
          type uint64;
          units frames;
          description 
            "A count of PAUSE MAC Control frames transmitted on this
             Ethernet interface.  This counter does not increment when
             the IEEE 802.3 Ethernet interface is operating in
             half-duplex mode.

             Discontinuities in the value of this counter can occur at
             re-initialization of the management system, and at other
             times as indicated by the value of
             ifCounterDiscontinuityTime.";
          reference 
            "IEEE 802.3, 30.3.4.2,aPAUSEMACCtrlFramesTransmitted
             IEEE 802.3.1, dot3HCOutPauseFrames and
             dot3OutPauseFrames";
        }
      }
      container statistics-lpi {
        description
          "Group of statistics specific to MAC Control operation of
           selected Ethernet interfaces.";
        leaf in-lpi-transiton-count {
          type uint64;
          units microsends;
          description 
            "A count of occurrences of the transition from DEASSERT
             to ASSERT of the LPI_INDICATE parameter. The indication
             reflects the state of the PHY according to the
             requirements of the RS (see IEEE 802.3 22.7, 35.4,
             and 46.4).  This counter has a maximum increment rate of
             50 000 counts per second at 100 Mb/s; 90 000 counts per
             second at 1000 Mb/s; and 230 000 counts per second at 10
             Gb/s.";
          reference
            "IEEE 802.3, 30.3.2.1.11 aReceiveLPITransitions";
        }
        leaf in-lpi-ms {
          type uint64;
          units microsends;
          description 
            "A count reflecting the amount of time that the
             LPI_REQUEST parameter has the value ASSERT.  The request
             is indicated to the PHY according to the requirements of
             the RS (see IEEE 802.3 22.7, 35.4, and 46.4).  This
             counter has a maximum increment rate of 1 000 000 counts
             per second.";
          reference
            "IEEE 802.3, 30.3.2.1.8 aTransmitLPIMicroseconds";
        }
        leaf out-lpi-transiton-count {
          type uint64;
          units microsends;
          description 
            "A count of occurrences of the transition from state
             LPI_DEASSERTED to state LPI_ASSERTED of the LPI transmit
             state diagram is the RS. The state transition
             corresponds to the assertion of the LPI_REQUEST
             parameter. The request is indicated to the PHY according
             to the requirements of the RS (see IEEE 802.3 22.7,
             35.4, 46.4.)  This counter has a maximum increment rate
             of 50 000 counts per second at 100 Mb/s; 90 000 counts
             per second at 1000 Mb/s; and 230 000 counts per second
             at 10 Gb/s.";
          reference
            "IEEE 802.3, 30.3.2.1.10 aTransmitLPITransitions";
        }
        leaf out-lpi-ms {
          type uint64;
          units microsends;
          description 
            "A count reflecting the amount of time that the
             LPI_INDICATION parameter has the value ASSERT.  The
             request is indicated to the PHY according to the
             requirements of the RS (see IEEE 802.3 22.7, 35.4,
             and 46.4).  This counter has a maximum increment rate of
             1 000 000 counts per second.";
          reference
            "IEEE 802.3, 30.3.2.1.9 aReceiveLPIMicroseconds";
        }
      }
    }
  }
}
